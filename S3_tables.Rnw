\chapter{Opérations sur les tables de données\label{c:tables}}

\section{Travail sur les lignes et colonnes}

Dans une grande variété de situations, il peut être avantageux de répéter une opération sur toutes les lignes, ou toutes les colonnes.
R propose une fonction pour automatiser ce traitement, \emph{via} la fonction \texttt{apply}. 

<<applyExample>>=
dat = matrix(rnorm(100),nrow=10)
apply(dat,1,mean)
apply(dat,2,var)
@ 

\section{Division et traitement par niveau}

En utilisant différentes fonctions, on peut traiter facilement un jeu de données par «niveaux» d'un facteur (p.ex. traitement expérimental).
En rechargeant les données \emph{Lamellodiscus}, on peut par exemple chercher à connaître la moyenne et la variance de la taille de chaque pièce sclérifiée.

<<readMorpho>>=
morpho = read.table("data/lamellodiscus.txt",h=TRUE,sep='\t')
@

\noindent L'étape suivante est de diviser les données, en utilisant la fonction \texttt{split}.
Cette fonction prend une \texttt{data.frame}, la divise selon les valeurs de la colonne (ou combinaison de colonnes) choisie, et renvoie les sous-tableaux sous forme de liste.

<<splitMorpho>>=
morpho_split = split(morpho,morpho$sppar)
names(morpho_split)
morpho_split$conf
@

\noindent On obtient 13 tableaux de données, un pour chaque espèce de parasites.
On souhaite éliminer ceux qui ont été observés moins de trois fois au total.
Ceci implique de parcourir chaque élément de la liste, et de déterminer sa taille.
R propose une fonction \texttt{lapply}, littéralement \texttt{apply} sur une \texttt{l}iste, pour effectuer cette tâche:

<<lapplyIntro>>=
n_obs = unlist(lapply(morpho_split,nrow))
n_obs >= 3
@

\noindent Notons que \texttt{lapply} retourne une liste.
On peut ensuite utiliser les infomations sur le nombre d'observations, \texttt{n\_obs}, pour choisir quels sous-tableaux garder: 

<<subsetListe>>=
morpho_split = morpho_split[n_obs>=3]
@

\noindent la encore, on remarquera que pour exclure certains éléments d'une liste, on utilise les crochets simples, comme pour un vecteur, et non les crochets doubles.
On vérifie maintenant qu'il ne reste plus que des espèces avec plus de 3 observations:

<<checkObs>>=
unlist(lapply(morpho_split,nrow))
@

On veut maintenant calculer la moyenne des éléments de chaque sous-tableau, en ne sélectionnant que les colonnes correspondant aux mesures morphométriques.
Ces colonnes sont les 4 et suivantes, soit \texttt{c(4:ncol(x))} dans le langage de R, si on travaille sur un objet \texttt{x}.
Une fois ces colonnes extraites, on peut vérifier qu'on obtient bien une matrice,

<<checkMatrix>>=
morpho_split$furc[,c(4:ncol(morpho_split$furc))]
@

\noindent, dont on peut calculer la moyenne sur chaque colonne par la fonction \texttt{apply}.

<<>>=
moy = function(x) apply(x[,c(4:ncol(x))],2,mean,na.rm=TRUE)
@

On peut maintenant appliquer cette fonction à nos données divisées en groupes:

<<>>=
lapply(morpho_split,moy)
@

On peut aussi convertir facilement cette information en une \texttt{data.frame}, que l'on pivote pour avoir les noms des espèces en lignes:

<<>>=
t(as.data.frame(lapply(morpho_split,moy)))
@

\section{Traitement des données}

Il existe des moyens de rendre les étapes décrites dans la partie précédente automatique.
Par exemple, la fonction \texttt{aggregate} permet d'aggréger les données en fonction de deux éléments: une combinaison de facteurs, et une fonction.
On peut, en une ligne, connaître la moyenne de chacune des mesures, par hôte et par parasite, avec

<<aggregateExpl>>=
aggregate(morpho,by=list(hote=morpho$sphot,parasite=morpho$sppar),mean,na.rm=TRUE)
@ 

\noindent Cette ligne signifie, en clair, pour chaque niveau de \texttt{sphot} et pour chaque niveau de \texttt{sppar}, calculer la moyenne de toutes les colonnes de \texttt{morpho}. 
On peut récupérer la moyenne de \texttt{aa} uniquement, avec

<<aggregateExplSingleFac>>=
aggregate(morpho$aa,by=list(hote=morpho$sphot,parasite=morpho$sppar),mean)
@


\section{Sélection d'un sous-ensemble}

R permet de facilement sélectionner un sous-ensemble des données sur lequel travailler, avec la fonction \texttt{subset}. Cette fonction sélectionne une partie des lignes d'une \emph{data frame} selon une série de conditions. Par exemple, dans les données morpho, on veut uniquement travailler sur les mesures de \emph{L. elegans} (\texttt{sppar == 'eleg'}) trouvés sur \emph{D. vulgaris} (\texttt{sppar == 'divu'}), pour lesquelles la valeur \emph{cc} est inférieure où égale à 1 (\texttt{cc <= 1}).

<<introSubset>>=
ElDvSmall = subset(morpho,(morpho$sppar=='eleg')&(morpho$sphote=='Divu')&(morpho$cc<=1))
ElDvSmall
@

Pour récupérer uniquement les valuers de \emph{a}, on dispose des eux options suivantes:

<<introSubset2>>=
ElDvSmall$a
subset(morpho$a,(morpho$sppar=='eleg')&(morpho$sphote=='Divu')&(morpho$cc<=1))
@

\section{Tables de contingence}

R permet très facilement de regrouper les données sous forme de table. Par exemple, on veut représenter la moyenne des mesures de la dimension \emph{a}:

<<XtabAgr>>=
moyA = aggregate(morpho,by=list(hote=morpho$sphot,parasite=morpho$sppar),mean,na.rm=TRUE)
round(xtabs(a~hote+parasite,moyA),1)
@

La fonction \texttt{xtabs} permet de prendre une colonne du \emph{data frame}, et de créer un tableau à double entrées avec l'ensemble de ses valeurs. On peut s'en servir pour créer une table de contingence, en omettant de dire quelle valeur doit se trouver dans le tableau:

<<XtabChisq>>=
Conting = xtabs(~sphote+sppar,morpho)
Conting
sum(Conting)
@

Si aucune colonne n'est spécifiée, R fournit le nombre d'observatins. On peut vérifier que le total est de 189, on dispose donc, en une commande, du nombre d'échantillons pris pour chaque condition. Notez aussi que les objets retournés par \texttt{xtabs} peuvent aller directement dans un certain nombre de tests statistiques, notamment

<<ChiSQ>>=
chisq.test(Conting)
@

\section{Jonctions de tables de données}

On souhaite regrouper dans un \texttt{data.frame} unique deux séries de données disponibles dans \textcite{Andrews1985}: le nombre de peaux de Lynx enregistrées par la compagnie de la Baie d'Hudson de 1857 à 1911 (\texttt{data/lynxunits.dat}), et le prix de ces peaux (\texttt{data/lynxprices.dat}). Il y a plusieurs problèmes avec ces données. D'une part, les années ne sont pas entrées dans le même ordre, et il n'est donc pas possible de faire un \texttt{cbind}. D'autre part, la colonne correspondant aux années est nommée \texttt{year} dans un cas, et \texttt{Year} dans l'autre.

R propose une fonction nommée \texttt{merge}, qui permet d'aggéreger très facilement des données. On commence par les charger:

<<>>=
units = read.table('data/lynxunits.dat',h=T)
prices = read.table('data/lynxprices.dat',h=T)
head(units)
head(prices)
@

La commande \texttt{merge} demande les deux tables de données, et deux arguments \texttt{by.x} et \texttt{by.y}, qui indique quelles colonnes doivent être utilisées pour le regroupement. Notez au passage que si les deux tables de données ont des colonnes avec le même nom, par défaut, R réunira les données selon ces colonnes.

<<>>=
dataset = merge(units,prices,by.x='year',by.y='Year')
head(dataset)
@

Notez au passage que la fonction \texttt{merge} va trier automatiquement les colonnes sur lequelles elle opère le regroupement: les années sont maintenant en ordre. Avec ce qui a été vu dans la séance précédente, on peut écrire les données dans un fichier texte:

<<>>=
write.table(dataset,file='data/lynxdata.txt',row.names=FALSE)
@