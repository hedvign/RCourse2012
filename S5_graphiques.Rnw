\chapter{Graphiques}

R propose un moteur grahique d'une très grande puissance, qui possède en plus une flexibilité importante.
Il est possible, avec un effort minimal, de produire à peu près tous les types de visualisations possibles directement dans R.
L'objectif de cette séance est de vous familiariser avec les commandes de base disponibles dans R par défaut.
Les personnes à la recherche de solutions toutes faites pour visualiser des données complexes peuvent aller voir la documentation des \emph{packages} \texttt{ggplot2} (intuitif à utiliser, assez lent) ou \texttt{lattice} (utilisation complexe, assez rapide).

\section{Principaux types de visualisations}

\subsection{Nuages de points}

La manière la plus simple de représenter un objet dans R est d'utiliser la fonction \texttt{plot}. Par exemple,

<<firstplot,fig=TRUE>>=
distrib = sort(rnorm(10))
plot(distrib)
@

R va prendre en charge le calcul d'une grande partie des paramètres nécéssaires à la visualisation, comme par exemple les limites des différents axes, et l'espacement entre les valeurs sur les axes.
Il est possible de manuellement spécifier l'ensemble de ces paramètres.
Par exemple, on peut vouloir changer les étiquettes des axes x et y par quelque chose de plus explicite.

%TODO Figure

R permet aussi de choisir comment visualiser ces données, en changeant la valeur de l'argument \texttt{type}:  

<<plottype,fig=TRUE>>=
par(mfcol=c(2,2))
plot(distrib,type='l',xlab='type l')
plot(distrib,type='b',xlab='type b')
plot(distrib,type='h',xlab='type h')
plot(distrib,type='o',pch=19,xlab='type o')
@

\subsection{Histogrammes}

R offre la possibilité de représenter facilement des distributions, \emph{via} des commandes particulières.
La plus simple d'utilisation est \texttt{hist}, qui permet de représenter un histograme.

<<firsthist,fig=TRUE>>=
distrib = rnorm(1000)
hist(distrib)
@

Par défaut, R attribue un titre à ces graphiques; on peut supprimer ce titre en mettant l'argument \texttt{main} à une valeur nulle.

<<histnotitle,fig=TRUE>>=
hist(distrib,main='')
@

On peut choisir la couleur des barres, \emph{via} l'argument \texttt{col}.
Comme dans un grand nombre de situations dans lesquelles on fait appel a des vecteurs, R utilise le recyclage:
si le nombre de barres de l'histogramme est plus grand que le nombre de couleurs fournies, les couleurs des barres sont alternées.

<<histcolor,fig=TRUE>>=
hist(distrib,main='',col=c(1:8))
@

\subsection{\emph{Boxplots}}

R permet de créer facilement des \emph{boxplots}, qui permettent de visualiser certains propriétés d'une distribution statistique.
Il existe deux manières de créer des \emph{boxplots}, dans R, \emph{via} une formule et \emph{via} une liste.
\emph{Via} une formule, on spécifie les éléments a visualiser selon la syntaxe \texttt{reponse\~traitement, data}:

<<bplotFORM,fig=TRUE>>=
boxplot(a~sppar,morpho_split,las=2)
@

\noindent On notera que l'argument \texttt{las} (\texttt{?par}) permet de choisir comment les étiquettes des axes sont affichées.
Dans le cas des \emph{boxplots}, avoir les étiquettes perpendiculaires permet qu'elles soient toutes affichées.
La deuxième façon de spécifier les données est de les passer sous forme de liste.
Dans ce cas, on peut aboutir au même résultat que la figure précédente avec:

<<bplotLIST,fig=TRUE>>=
boxplot(split(morpho_split$a,morpho_split$sppar),las=2)
@ 

\subsection{Diagrammes en barres}

\section{Ajout d'éléments sur un graphique}

\subsection{Autres séries de données}

\subsection{Légendes et axes}

\subsection{Annotations}

\section{Enregistrement des figures}

R permet non seulement d'afficher les graphiques dans une fenêtre à part, mais aussi de les enregistrer dans différents formats.
La structure générale du code permettant d'enregistrer une figure est toujours la même:

<<pseudocodeDevice,eval=FALSE>>=
open_device(file="file.extension")
plot(my_data)
dev.off()
@

La commande \texttt{open\_device} peut prendre plusieurs formes selon le type de fichier désiré en sortie.
Les plus communes sont sans doute \texttt{pdf}, \texttt{png}, et \texttt{tiff}.
Reportez vous à l'aide de chacune de ces fonctions pour comprendre les arguments.

La commande \texttt{dev.off()} est extrèmement importante: elle permet de fermer le périphérique graphique actif.
Sans cette commande, le fichier n'est pas fini d'écrire, et il ne pourra pas être lu à la fermeture de R.
Dans RStudio, quel est l'effet de la commande \texttt{dev.off()} après qu'un graphique ait été affiché?

\section{Mise en application}

\subsection{Diagramme en barres}

Dans cette mise en application, on veut créer une visualisation qui met en avant les valeurs extrèmes d'une distribution, en utilisant un diagramme en barre.
Spécifiquement, on souhaite que les barres correspondant à des valeurs plus petites, ou plus grandes, que des valeurs fixées, soient colorées différement.
En vous aidant de ce qui a été vu jusqu'ici, et de l'aide de la fonction \texttt{barplot}, produisez cette visualisation.

\clearpage
\section{Solution des mises en application}

\subsection{Diagramme en barres}

On souhaite représenter une diagramme en barres, et colorer les barres qui sont au dessous ou au dessus de valeurs données.
On commence par choisir la série de données qui nous intéresse -- on peut la trier en ordre croissantm, pour faciliter la lecture du graphique:

<<ma5createData>>=
test_data = c(1,4,3,12,-2,-6,-1,1)
test_data = sort(test_data)
@

Pour colorer chaque barre de manière indépendante, on va créer un vecteur \texttt{colors}, qui contiendra une valeur par barre:

<<ma5createCols>>=
colors = rep(2,length(test_data))
@

Chaque barre sera donc de la couleur \texttt{2}, qui dépend de la \texttt{palette} actuelle.
Pour changer la couleur de chaque barre, il y a deux approches.
La première consiste a écrire une boucle:

<<ma5wrong,eval=FALSE>>=
for(co_idx in c(1:length(test_data)))
{
	if(test_data[co_idx] > 10) colors[co_idx] = 3
	if(test_data[co_idx] < -5) colors[co_idx] = 1
}
@

Une méthode plus élégante tire parti de la vectorisation:


<<ma5colors>>=
colors[test_data > 10] = 3
colors[test_data < -5] = 1
colors
@

On peut ensuite afficher le graphique avec les barres de chaque couleur:

<<ma5graphbarfinal,fig=TRUE>>=
barplot(test_data,col=colors,ylim=range(test_data)+c(-2,2), space = 0)
abline(h=0,lwd=2)
box()
@